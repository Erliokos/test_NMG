// THIS FILE IS AUTOGENERATED. PLEASE DO NOT EDIT IT
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: any;
};

export type CollectionEntity = {
  caption: Scalars['String'];
  createAt: Scalars['DateTime'];
  id: Scalars['ID'];
  text: Scalars['String'];
  updateAt: Scalars['DateTime'];
};

export type CollectionInput = {
  caption: Scalars['String'];
  text: Scalars['String'];
};

export type Mutation = {
  create: CollectionEntity;
  delete: Scalars['Boolean'];
};


export type MutationCreateArgs = {
  input: CollectionInput;
};


export type MutationDeleteArgs = {
  id: Scalars['Float'];
};

export type Query = {
  get: Array<CollectionEntity>;
};

export type CreateMutationVariables = Exact<{
  input: CollectionInput;
}>;


export type CreateMutation = { create: { id: string, caption: string, text: string, createAt: any, updateAt: any } };

export type DeleteMutationVariables = Exact<{
  id: Scalars['Float'];
}>;


export type DeleteMutation = { delete: boolean };

export type GetQueryVariables = Exact<{ [key: string]: never; }>;


export type GetQuery = { get: Array<{ id: string, caption: string, text: string, createAt: any, updateAt: any }> };

export type CollectionFragment = { id: string, caption: string, text: string, createAt: any, updateAt: any };
